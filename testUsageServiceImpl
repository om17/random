package com.everhealth.usage.integration.service.impl;

import com.everhealth.usage.integration.common.ApplicationConstants;
import com.everhealth.usage.integration.entity.TransactionLog;
import com.everhealth.usage.integration.entity.TransactionPayload;
import com.everhealth.usage.integration.feign.ZuoraClient;
import com.everhealth.usage.integration.model.UsageResponse;
import com.everhealth.usage.integration.model.UsageRequest;
import com.everhealth.usage.integration.model.ZuoraResponse;
import com.everhealth.usage.integration.service.TransactionService;
import com.everhealth.usage.integration.service.UsageService;
import com.everhealth.usage.integration.util.JsonToString;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import feign.FeignException;
import io.micrometer.common.util.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class UsageServiceImpl implements UsageService {

    Logger log = LoggerFactory.getLogger(UsageServiceImpl.class);
    private final ZuoraAuthServiceImpl zuoraAuthServiceImpl;
    @Autowired
    private TransactionService transactionService;
    @Autowired
    ObjectMapper objectMapper;
    @Autowired
    private ZuoraClient zuoraClient;

    public UsageServiceImpl(ZuoraAuthServiceImpl zuoraAuthServiceImpl){

        this.zuoraAuthServiceImpl = zuoraAuthServiceImpl;

    }


    @Override
    public ResponseEntity<Object> sendUsageRecords(List<UsageRequest> usageRequest) throws JsonProcessingException {
        log.info("UsageServiceImpl - insertUsageDetails method start");

        UsageResponse usageResponse = new UsageResponse();
        //Generate access Token
        String accessToken = zuoraAuthServiceImpl.getOAuthToken();
        log.info("sendUsageRecords flow - successfully retrieved oauth token ");
        if(!StringUtils.isEmpty(accessToken))
        {
            processUsageRecords(usageRequest, accessToken, usageResponse);
            log.info("UsageServiceImpl - insertUsageDetails method end");
            return ResponseEntity.ok().body(usageResponse);
        }
        else{
            log.warn("Retrieved Zuora OAuth token is NULL or EMPTY");
            buildResponse(null, usageResponse,ApplicationConstants.TOKEN_ERROR_MESSAGE,false);
            return ResponseEntity.internalServerError().body(usageResponse);
        }

    }


    private void processUsageRecords(List<UsageRequest> usageRequest, String accessToken, UsageResponse usageResponse) {
        log.info("UsageServiceImpl - processUsageRecords method start");
        Map<TransactionLog, TransactionPayload> transactionMap = new HashMap<>();

        List<UsageRequest> rcmRequest = new ArrayList<>();
        List<UsageRequest> standardRequest = new ArrayList<>();

        for(UsageRequest req : usageRequest){

            if(ApplicationConstants.RCM_UOM.equalsIgnoreCase(req.getUom())){

                rcmRequest.add(req);
            }else {
                standardRequest.add(req);
            }
        }

        try {
            ResponseEntity<Object> response = null;
            if(!standardRequest.isEmpty()){
                response = zuoraClient.insertUsageDetails("Bearer "+ accessToken , standardRequest);

                handleMultipleResponse(standardRequest,response,usageResponse,transactionMap,false);
            }
            if(!rcmRequest.isEmpty()){
                response = zuoraClient.insertRCMUsageDetails("Bearer "+ accessToken , rcmRequest);

                handleMultipleResponse(rcmRequest,response,usageResponse,transactionMap,true);
            }
        }catch (FeignException e) {
            log.info("Zuora Mediation API Thrown an Exception {} {} {}", e.getMessage(), e.status(), e.contentUTF8());
           //Handle multiple request of a particular recordType
            for (UsageRequest req : usageRequest) {
                buildfailureTrsansactionRecords(transactionMap, req, e.contentUTF8(), e.status(), e.getMessage(), ApplicationConstants.RCM_UOM.equalsIgnoreCase(req.getUom()));
                buildResponse(req, usageResponse, e.getMessage(), false);
            }
        } catch (Exception e) {
            log.info("Internal exception in method processUsageRecords {} ", e.getMessage());
            for (UsageRequest req : usageRequest) {
                buildResponse(req, usageResponse, e.getMessage(), false);
            }
        }



        transactionService.saveTransactionRecords(transactionMap);
        log.info("UsageServiceImpl - processUsageRecords method end");
    }



    private void handleMultipleResponse(List<UsageRequest> requests, ResponseEntity<Object> response, UsageResponse usageResponse, Map<TransactionLog, TransactionPayload> transactionMap, boolean isRCMUsage
    ) throws JsonProcessingException {
        if (response.getStatusCode().is2xxSuccessful()) {
            ZuoraResponse zuoraResponse = objectMapper.convertValue(
                    response.getBody(),
                    ZuoraResponse.class
            );

            String usageResponseStr = JsonToString.convertObjectToJsonString(zuoraResponse);

            // Apply the same response to all requests
            for (UsageRequest req : requests) {
                if (zuoraResponse.getSuccess()) {
                    buildSuccessTrsansactionRecords(transactionMap, req, usageResponseStr, isRCMUsage);
                } else {
                    buildfailureTrsansactionRecords(
                            transactionMap,
                            req,
                            usageResponseStr,
                            response.getStatusCode().value(),
                            zuoraResponse.getMessage(),
                            isRCMUsage
                    );
                }

            }
            buildSuccessResponse(usageResponse, zuoraResponse.getMessage(), zuoraResponse.getSuccess());


        } else {

            // Handle batch failure for all requests
            for (UsageRequest req : requests) {
                buildfailureTrsansactionRecords(
                        transactionMap,
                        req,
                        response.getBody().toString(),
                        response.getStatusCode().value(),
                        "Batch Failure",
                        isRCMUsage
                );
            }
            buildSuccessResponse(usageResponse, "Batch Failure", false);
        }
    }

    private void buildResponse(UsageRequest usageRequestObj, UsageResponse usageResponse, String message,boolean status) {
        log.info("UsageServiceImpl - buildResponse method start");
        usageResponse.setMessage(message);
        usageResponse.setSuccess(status);

        log.info("UsageServiceImpl - buildResponse method end");
    }

    private void buildSuccessResponse( UsageResponse usageResponse, String message,boolean status) {
        log.info("UsageServiceImpl - buildResponse method start");
        usageResponse.setMessage(message);
        usageResponse.setSuccess(status);

        log.info("UsageServiceImpl - buildResponse method end");
    }

    private void buildSuccessTrsansactionRecords(Map<TransactionLog, TransactionPayload> transactionMap, UsageRequest usageRequestObj, String response,boolean isRCMUsage) {
        log.info("UsageServiceImpl - buildSuccessTrsansactionRecords method start");
        TransactionLog transactionLog=new TransactionLog();
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("ddMMyyHHmmss");
        String formattedTimestamp = now.format(formatter);
        transactionLog.setEventId(usageRequestObj.getUniqueKey()+"_"+formattedTimestamp);
        transactionLog.setObjectName(ApplicationConstants.OBJECT_NAME);
        transactionLog.setObjectId(usageRequestObj.getChargeId());
        transactionLog.setLogType(ApplicationConstants.LOG_TYPE);
        if(isRCMUsage){
            transactionLog.setAction(ApplicationConstants.RCM_USAGE);
        }else {
            transactionLog.setAction(ApplicationConstants.STANDARD_USAGE);
        }
        transactionLog.setStatus(ApplicationConstants.SUCCESS);
        transactionLog.setServiceName(ApplicationConstants.SERVICE_NAME);
        transactionLog.setSourceSystem(ApplicationConstants.SOURCE_SYSTEM);
        transactionLog.setTargetSystem(ApplicationConstants.TARGET_SYSTEM);
        transactionLog.setCreatedTimeStamp(now);
        transactionLog.setUpdatedTimeStamp(now);

        TransactionPayload transactionPayload=new TransactionPayload();
        transactionPayload.setRequestPayload(JsonToString.convertObjectToJsonString(usageRequestObj));
        transactionPayload.setResponsePayload(response);
        transactionPayload.setCreatedTimeStamp(now);
        transactionPayload.setUpdatedTimeStamp(now);
        transactionMap.put(transactionLog,transactionPayload);
        log.info("UsageServiceImpl - buildSuccessTrsansactionRecords method end");
    }
    private void buildfailureTrsansactionRecords(Map<TransactionLog, TransactionPayload> transactionMap, UsageRequest requestObj, String response, int statusCode,String errorMessage,boolean isRCMUsage) {
        log.info("UsageServiceImpl - buildfailureTrsansactionRecords method start");
        TransactionLog transactionLog=new TransactionLog();
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("ddMMyyHHmmss");
        String formattedTimestamp = now.format(formatter);
        transactionLog.setEventId(requestObj.getUniqueKey()+"_"+formattedTimestamp);
        transactionLog.setObjectName(ApplicationConstants.OBJECT_NAME);
        transactionLog.setObjectId(requestObj.getChargeId());
        transactionLog.setLogType(ApplicationConstants.LOG_TYPE);
        if(isRCMUsage){
            transactionLog.setAction(ApplicationConstants.RCM_USAGE);
        }else {
            transactionLog.setAction(ApplicationConstants.STANDARD_USAGE);
        }
        transactionLog.setStatus(ApplicationConstants.FAILURE);
        transactionLog.setServiceName(ApplicationConstants.SERVICE_NAME);
        transactionLog.setSourceSystem(ApplicationConstants.SOURCE_SYSTEM);
        transactionLog.setTargetSystem(ApplicationConstants.TARGET_SYSTEM);
        transactionLog.setErrorCode(statusCode);
        transactionLog.setErrorMessage(errorMessage);
        transactionLog.setCreatedTimeStamp(now);
        transactionLog.setUpdatedTimeStamp(now);

        TransactionPayload transactionPayload=new TransactionPayload();
        transactionPayload.setRequestPayload(JsonToString.convertObjectToJsonString(requestObj));
        transactionPayload.setResponsePayload(response);
        transactionPayload.setCreatedTimeStamp(now);
        transactionPayload.setUpdatedTimeStamp(now);
        transactionMap.put(transactionLog,transactionPayload);
        log.info("UsageServiceImpl - buildfailureTrsansactionRecords method end");
    }


}
