package com.takeda.apds.sorting.exception.handler;

import com.takeda.apds.sorting.dto.response.ErrorResponse;
import com.takeda.apds.sorting.exception.InvalidRequestException;
import com.takeda.apds.sorting.exception.ManualDispositionException;
import com.takeda.apds.sorting.exception.ResourceNotFoundException;
import com.takeda.apds.sorting.util.SortingConstants;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.ConstraintViolationException;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.Map;
import java.util.stream.Collectors;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authorization.AuthorizationDeniedException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.MissingRequestHeaderException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

/**
 * Global exception handler for the sorting service.
 * Handles exceptions thrown by controllers and returns appropriate error responses.
 */
@Slf4j
@ControllerAdvice
public class GlobalExceptionHandler {

    /**
     * Handles IllegalArgumentException and returns a BAD_REQUEST error response.
     *
     * @param ex the thrown IllegalArgumentException
     * @return ResponseEntity with BAD_REQUEST status and error details
     */
    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<ErrorResponse> handleBadRequestException(IllegalArgumentException ex) {
        ErrorResponse error = new ErrorResponse(
                "BAD_REQUEST",
                ex.getMessage(),
                LocalDateTime.now().toString()
        );
        log.error("{}", error.message());
        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
    }

    /**
     * Handles NoSuchElementException and returns a NOT_FOUND error response.
     *
     * @param ex the thrown NoSuchElementException
     * @return ResponseEntity with NOT_FOUND status and error details
     */
    @ExceptionHandler(java.util.NoSuchElementException.class)
    public ResponseEntity<ErrorResponse> handleNoSuchScheduleException(java.util.NoSuchElementException ex) {
        ErrorResponse error = new ErrorResponse(
                "SCHEDULE NOT_FOUND",
                ex.getMessage(),
                LocalDateTime.now().toString()
        );
        log.error("{}", error.message());
        return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
    }

    /**
     * Handles ResourceNotFoundException and returns a NOT_FOUND response.
     *
     * @param exception the ResourceNotFoundException to handle
     * @return ResponseEntity with error response and NOT_FOUND status
     */
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<Map<String, ErrorResponse>> handleResourceNotFound(ResourceNotFoundException exception) {
        ErrorResponse error = new ErrorResponse(
                SortingConstants.RESOURCE_NOT_FOUND_CODE,
                exception.getMessage(),
                LocalDateTime.now(ZoneOffset.UTC).truncatedTo(ChronoUnit.MILLIS).format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)
        );
        log.error("{}", error.message());
        Map<String, ErrorResponse> body = Map.of(SortingConstants.ERROR_KEY, error);
        return new ResponseEntity<>(body, HttpStatus.NOT_FOUND);
    }

    /**
     * Handles InvalidRequestException and returns a BAD_REQUEST response.
     *
     * @param exception the InvalidRequestException to handle
     * @return ResponseEntity with error response and BAD_REQUEST status
     */
    @ExceptionHandler(InvalidRequestException.class)
    public ResponseEntity<Map<String, ErrorResponse>> handleInvalidRequest(InvalidRequestException exception) {
        ErrorResponse error = new ErrorResponse(
                HttpStatus.BAD_REQUEST.name(),
                exception.getMessage(),
                LocalDateTime.now(ZoneOffset.UTC).truncatedTo(ChronoUnit.MILLIS).format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)
        );
        log.error("{}", error.message());
        Map<String, ErrorResponse> body = Map.of(SortingConstants.ERROR_KEY, error);
        return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
    }

    /**
     * Handles ManualDispositionException and returns a BAD_REQUEST response with manual disposition error code.
     *
     * @param exception the ManualDispositionException to handle
     * @return ResponseEntity with error response and BAD_REQUEST status
     */
    @ExceptionHandler(ManualDispositionException.class)
    public ResponseEntity<Map<String, ErrorResponse>> handleManualDispositionException(ManualDispositionException exception) {
        ErrorResponse error = new ErrorResponse(
                exception.getCode(),
                exception.getMessage(),
                LocalDateTime.now(ZoneOffset.UTC)
                        .truncatedTo(ChronoUnit.MILLIS)
                        .format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)
        );
        log.error("{} - {}", error.code(), error.message());
        Map<String, ErrorResponse> body = Map.of(SortingConstants.ERROR_KEY, error);
        return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
    }

    /**
     * Handles MissingRequestHeaderException and returns a BAD_REQUEST response.
     *
     * @param exception the MissingRequestHeaderException to handle
     * @return ResponseEntity with error response and BAD_REQUEST status
     */
    @ExceptionHandler(MissingRequestHeaderException.class)
    public ResponseEntity<Map<String, ErrorResponse>> handleMissingRequestHeaderException(MissingRequestHeaderException exception) {

        ErrorResponse error = new ErrorResponse(
                SortingConstants.MISSING_REQUEST_HEADER,
                exception.getMessage(),
                LocalDateTime.now(ZoneOffset.UTC)
                        .truncatedTo(ChronoUnit.MILLIS)
                        .format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)
        );
        log.error("{}", error.message());
        Map<String, ErrorResponse> body = Map.of(SortingConstants.ERROR_KEY, error);
        return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
    }


    /**
     * Handles MethodArgumentNotValidException and returns a BAD_REQUEST response with validation error details.
     *
     * @param exception the MethodArgumentNotValidException to handle
     * @return ResponseEntity with error response and BAD_REQUEST status
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<Map<String, ErrorResponse>> handleMethodArgumentNotValidException(MethodArgumentNotValidException exception) {
        String message = exception.getBindingResult().getFieldErrors().stream()
                .map(error -> {
                    String defaultMessage = error.getDefaultMessage();
                    if (defaultMessage != null && !defaultMessage.isEmpty()) {
                        return defaultMessage;
                    } else {
                        return exception.getMessage();
                    }
                }).collect(Collectors.joining("; "));

        ErrorResponse error = new ErrorResponse(
                SortingConstants.INVALID_REQUEST,
                message,
                LocalDateTime.now(ZoneOffset.UTC)
                        .truncatedTo(ChronoUnit.MILLIS)
                        .format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)
        );
        log.error("{}", error.message());
        Map<String, ErrorResponse> body = Map.of(SortingConstants.ERROR_KEY, error);
        return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
    }

    /**
     * Handles ConstraintViolationException and returns a BAD_REQUEST response with constraint violation details.
     *
     * @param exception the ConstraintViolationException to handle
     * @return ResponseEntity with error response and BAD_REQUEST status
     */
    @ExceptionHandler(ConstraintViolationException.class)
    public ResponseEntity<Map<String, ErrorResponse>> handleConstraintViolationException(ConstraintViolationException exception) {
        String message = exception.getConstraintViolations()
                .stream()
                .map(ConstraintViolation::getMessage)
                .collect(Collectors.joining("; "));

        ErrorResponse error = new ErrorResponse(
                SortingConstants.CONSTRAINT_VIOLATION_EXCEPTION,
                message,
                LocalDateTime.now(ZoneOffset.UTC)
                        .truncatedTo(ChronoUnit.MILLIS)
                        .format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)
        );
        log.error("{}", error.message());
        Map<String, ErrorResponse> body = Map.of(SortingConstants.ERROR_KEY, error);
        return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
    }

    /**
     * Handles all other exceptions and returns an INTERNAL_SERVER_ERROR response.
     *
     * @param ex the thrown Exception
     * @return ResponseEntity with INTERNAL_SERVER_ERROR status and error details
     */
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponse> handleGenericException(Exception ex) {
        ErrorResponse error = new ErrorResponse(
                "UNEXPECTED_ERROR",
                ex.getMessage(),
                LocalDateTime.now().toString()
        );
        log.error("{}", error.message());
        return new ResponseEntity<>(error, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    /**
     * Handles AuthorizationDeniedException and returns an UNAUTHORIZED error response.
     *
     * @param ex the thrown AuthorizationDeniedException
     * @return ResponseEntity with UNAUTHORIZED status and error details
     */
    @ExceptionHandler(AuthorizationDeniedException.class)
    public ResponseEntity<ErrorResponse> handleAuthorizationDeniedException(AuthorizationDeniedException ex) {
        log.error("Authorization error: {}", ex.getMessage());
        ErrorResponse error = new ErrorResponse(
                "UNAUTHORIZED",
                ex.getMessage(),
                LocalDateTime.now().toString()
        );
        return new ResponseEntity<>(error, HttpStatus.UNAUTHORIZED);
    }
}
